#!/bin/sh
#
#  Installs my Neovim environment into my $HOME directory.
#
#

### Usage

usage='Usage: nvInstall [-s {install|repo|target}]'

### Setup

XDG_CONFIG_HOME="${XDG_CONFIG_HOME:=$HOME/.config}"
NVIM_GIT_REPO="${NVIM_GIT_REPO:=$HOME/devel/nvim}"
umask 0022

cd "$NVIM_GIT_REPO" || {
   printf "\\nError: Failed to cd into '%s'\\n" "$NVIM_GIT_REPO"
   return 1
}

NVIM_FILES='
   ftplugin/c.lua
   ftplugin/cpp.lua
   ftplugin/fish.lua
   ftplugin/haskell.lua
   ftplugin/help.lua
   ftplugin/html.lua
   ftplugin/lua.lua
   ftplugin/markdown.lua
   ftplugin/ocaml.lua
   ftplugin/rust.lua
   ftplugin/sbt.lua
   ftplugin/scala.lua
   ftplugin/sh.lua
   lua/grs/config/autocmds.lua
   lua/grs/config/colors.lua
   lua/grs/config/globals.lua
   lua/grs/config/keymaps.lua
   lua/grs/config/tooling.lua
   lua/grs/config/options.lua
   lua/grs/lib/functional.lua
   lua/grs/lib/text.lua
   lua/grs/plugins/editor/init.lua
   lua/grs/plugins/editor/colorscheme.lua
   lua/grs/plugins/editor/telescope.lua
   lua/grs/plugins/editor/textedit.lua
   lua/grs/plugins/editor/whichkey.lua
   lua/grs/plugins/lsp/init.lua
   lua/grs/plugins/lsp/cmp.lua
   lua/grs/plugins/lsp/lsp.lua
   lua/grs/plugins/lsp/rust.lua
   lua/grs/plugins/lsp/scala.lua
   lua/grs/plugins/lsp/utils.lua
   lua/grs/plugins/tooling/init.lua
   lua/grs/plugins/tooling/mason.lua
   lua/grs/plugins/tooling/treesitter.lua
   lua/grs/plugins/tooling/utils.lua
   lua/grs/plugins/lazy.lua
   init.lua
'

NVIM_TOML='
   selene.toml
   stylua.toml
   vim.toml
'

RM_TARGET_ITEMS="
   $XDG_CONFIG_HOME/nvim/lua/grs/utils
   $XDG_CONFIG_HOME/nvim/lua/grs/plugins/ide
"

### Argument parsing, last -s option wins, default is to install

switch=install
while getopts s: opt 2>&1
do
   case "$opt" in
      s)
         switch="$OPTARG"
         ;;
      \?)
         printf '\n%s\n' "$usage"
         return 1
         ;;
   esac
done
shift $((OPTIND - 1))

if [ $# -gt 0 ]
then
   printf '\nError: nvInstall takes no arguments\n'
   printf '\n%s\n' "$usage"
   return 1
fi

if [ "$switch" != install ] && [ "$switch" != repo ] && [ "$switch" != target ]
then
   printf '\nError: nvInstall -s given an invalid option argument\n'
   printf '\n%s\n' "$usage"
   return 1
fi

### Functions

## Function to ensure directory exists
ensure_dir () {
   targetDir="$1"
   srcDir="$2"
   if [ ! -d "$targetDir" ]
   then
      case "$switch" in
         install)
            mkdir -p "$targetDir" ||
               printf "\\nWarning: Failed to create '%s' directory\\n" "$targetDir"
            ;;
         target)
            printf "\\ntarget directory '%s' needs to be created\\n" "$targetDir"
            ;;
      esac
   fi
   if [ -n "$srcDir" ] && [ ! -d "$srcDir" ]
   then
      printf "\\nsource directory '%s' does not exist\\n" "$srcDir"
   fi
   targetDir=
   srcDir=
}

## Function to check or remove files or directories
remove_item () {
   item="$1"
   flag="$2"
   if test -e "$item"
   then
      case "$switch" in
         install)
            rm -rf "$item"
            test -e "$item" && {
               case "$flag" in
                  target)
                     printf "\\nWarning: Failed to remove '%s' from target\\n" "$item"
                     ;;
                  repo)
                     prigntf "\\nWarning: Failed to remove '%s' from repo\\n" "$item"
                     ;;
               esac
            }
            ;;
         repo)
            printf "\\n'%s' is still in the target\\n" "$item"
            ;;
         target)
            printf "\\n'%s' needs removing from the target\\n" "$item"
            ;;
      esac
   fi
}

## Function to install files
install_file () {
   install_dir="$1"
   file_path="$2"
   src_dir="$3"
   file_perm="$4"
   switch="$5"
   src="$src_dir/$file_path"
   src_abs="$NVIM_GIT_REPO${src#.}"
   trgt="$install_dir/$file_path"
   trgt_dir="${trgt%/*}"

   # Make sure target and source directory exists
   ensure_dir "$trgt_dir" "$src_dir"

   case "$switch" in
      install)
         # Install the file
         if cp "$src" "$trgt"
         then
            chmod --quiet "$file_perm" "$trgt" || {
               printf "\\nWarning: Failed to set permissions on '%s' to '%s'\\n" "$trgt" "$file_perm"
            }
         else
            printf "\\nWarning: Failed to install '%s'\\n" "$trgt"
         fi
         ;;
      repo)
         # Compare config (this script) with dotfile repo working directory
         test -e "$src" || {
            printf "\\nSource: '%s' not in git working directory.\\n" "$src_abs"
         }
         ;;
      target)
         # Compare config (this script) with install target
         if [ ! -e "$src" ] && [ ! -e "$trgt" ]
         then
            printf "\\nBoth Target: '%s'\n and Source: '%s' don't exist.\\n" "$trgt" "$src_abs"
         elif [ ! -e "$trgt" ]
         then
            printf "\\nTarget: '%s' doesn't exist.\\n" "$trgt"
         elif [ ! -e "$src" ]
         then
            printf "\\nSource: '%s' doesn't exist.\\n" "$src_abs"
         else
            diff "$src" "$trgt" > /dev/null || {
               printf "\\nTarget: '%s' differs from\\nSource: '%s'.\\n" "$trgt" "$src_abs"
            }
         fi
         ;;
   esac
}

### Install or check configuration files

# Install Neovim files
for nvim_file in $NVIM_FILES
do
   install_file "$XDG_CONFIG_HOME/nvim" "$nvim_file" . 0644 "$switch"
done
chmod 0755 "$XDG_CONFIG_HOME"/nvim

# Install $NVIM_TOML files from repo root to $XDG_CONFIG_HOME/nvim
#
#   Note: These don't seam to work in the repo
#         unless located at repo's root.
#
for conf_file in $NVIM_TOML
do
   install_file "$XDG_CONFIG_HOME/nvim" "$conf_file" . 0644 "$switch"
done

### Some final tweaks, checks & cleanup

# Remove/report no longer needed files and directories
for item in $RM_TARGET_ITEMS
do
   remove_item "$item" target
done

# Some final adjustments/tweaks/tasks
case "$switch" in
   install)
      :
      ;;
   repo)
      # Get git status info on repo
      printf '\nGit Status:\n'
      git status -s
      ;;
   target)
      :
      ;;
esac
